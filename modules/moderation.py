from pyrogram import filters
from pyrogram.types import Message
import json
import os

eula_db_path = "eula_acceptance.json"
if not os.path.exists(eula_db_path):
    with open(eula_db_path, "w") as f:
        json.dump({}, f)

def has_accepted(user_id):
    with open(eula_db_path, "r") as f:
        data = json.load(f)
    return str(user_id) in data and data[str(user_id)] is True

def accept(user_id):
    with open(eula_db_path, "r") as f:
        data = json.load(f)
    data[str(user_id)] = True
    with open(eula_db_path, "w") as f:
        json.dump(data, f)

def init(bot):
    @bot.on_message(filters.command("start"))
    async def start_command(client, message: Message):
        if has_accepted(message.from_user.id):
            await message.reply("‚úÖ –í—ã —É–∂–µ –ø—Ä–∏–Ω—è–ª–∏ —É—Å–ª–æ–≤–∏—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è. –°–ø–∞—Å–∏–±–æ!")
        else:
            await message.reply(
                "üìú –ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç–æ–≥–æ –±–æ—Ç–∞, –≤—ã –¥–æ–ª–∂–Ω—ã –ø—Ä–∏–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ (EULA).
"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /accept –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è.

"
                "–¢–µ–∫—Å—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏—è: https://telegra.ph/EULA-TelegramBot-07-05"
            )

    @bot.on_message(filters.command("accept"))
    async def accept_command(client, message: Message):
        accept(message.from_user.id)
        await message.reply("‚úÖ –°–ø–∞—Å–∏–±–æ! –í—ã –ø—Ä–∏–Ω—è–ª–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –∏ —Ç–µ–ø–µ—Ä—å –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.")

    @bot.on_message(filters.command("ban") & filters.group)
    async def ban_user(client, message: Message):
        if not has_accepted(message.from_user.id):
            return await message.reply("‚ùå –ü—Ä–∏–º–∏—Ç–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /accept.")
        if not message.reply_to_message:
            return await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –±–∞–Ω–∞.")
        try:
            await client.ban_chat_member(message.chat.id, message.reply_to_message.from_user.id)
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω.")
        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞: {e}")

    @bot.on_message(filters.command("kick") & filters.group)
    async def kick_user(client, message: Message):
        if not has_accepted(message.from_user.id):
            return await message.reply("‚ùå –ü—Ä–∏–º–∏—Ç–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /accept.")
        if not message.reply_to_message:
            return await message.reply("–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∫–∏–∫–∞.")
        try:
            await client.kick_chat_member(message.chat.id, message.reply_to_message.from_user.id)
            await client.unban_chat_member(message.chat.id, message.reply_to_message.from_user.id)
            await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–∏–∫–Ω—É—Ç.")
        except Exception as e:
            await message.reply(f"–û—à–∏–±–∫–∞: {e}")
