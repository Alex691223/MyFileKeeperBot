from aiogram import F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import get_all_users


from aiogram import Router, types
from aiogram.filters.command import Command
from config import ADMIN_ID

router = Router()

@router.message(Command("stats"))
async def stats(message: types.Message):
    print(f"–ö–æ–º–∞–Ω–¥–∞ /stats –æ—Ç {message.from_user.id}")
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 10, –ì—Ä—É–ø–ø: 5")

@router.message(Command("sendto"))
async def send_to_group(message: types.Message):
    print(f"–ö–æ–º–∞–Ω–¥–∞ /sendto –æ—Ç {message.from_user.id}")
    if message.from_user.id != ADMIN_ID:
        return
    args = message.text.split(maxsplit=2)
    if len(args) < 3:
        await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /sendto <group_id> <—Å–æ–æ–±—â–µ–Ω–∏–µ>")
        return
    group_id = args[1]
    text = args[2]
    try:
        await message.bot.send_message(chat_id=int(group_id), text=text)
        await message.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞: {e}")
class BroadcastStates(StatesGroup):
    waiting_text = State()
    confirm = State()
@router.message(Command("broadcast"))
@router.message(F.text == "üì¢ –†–∞—Å—Å—ã–ª–∫–∞")
async def start_broadcast(message: types.Message, state: FSMContext):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:")
    await state.set_state(BroadcastStates.waiting_text)
@router.message(BroadcastStates.waiting_text)
async def confirm_broadcast(message: types.Message, state: FSMContext):
    await state.update_data(text=message.text)

    kb = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_send"),
         InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_send")]
    ])
    await message.answer(f"–¢—ã —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n\n{message.text}", reply_markup=kb)
    await state.set_state(BroadcastStates.confirm)
@router.callback_query(F.data == "confirm_send")
async def do_broadcast(callback: types.CallbackQuery, state: FSMContext):
    data = await state.get_data()
    text = data.get("text")
    users = await get_all_users()
    count = 0

    for user_id in users:
        try:
            await callback.bot.send_message(user_id, text)
            count += 1
        except:
            continue

    await callback.message.edit_text(f"–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ø–µ—à–Ω–æ: {count}")
    await state.clear()

@router.callback_query(F.data == "cancel_send")
async def cancel_broadcast(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()
