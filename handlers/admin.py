from aiogram import Router, types, F
from aiogram.filters import Command
from config import ADMIN_PASSWORD
from utils.keygen import generate_keys, get_keys_info
from utils.auth import is_superadmin, set_user_role

router = Router()

@router.message(Command("panel"))
async def ask_password(msg: types.Message):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:")

@router.message(F.text == ADMIN_PASSWORD)
async def admin_panel(msg: types.Message):
    user_id = msg.from_user.id
    set_user_role(user_id, "admin")
    await msg.answer("üîê –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à—ë–Ω. –í–∞—à–∞ —Ä–æ–ª—å: admin.\n\n–ö–æ–º–∞–Ω–¥—ã:\n/generate ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–∏\n/keys ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–ª—é—á–µ–π\n/setrole ‚Äî –Ω–∞–∑–Ω–∞—á–∏—Ç—å —Ä–æ–ª—å")

@router.message(Command("generate"))
async def generate(msg: types.Message):
    if not is_superadmin(msg.from_user.id):
        await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    keys = generate_keys(10, created_by=msg.from_user.id)
    await msg.answer("üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–ª—é—á–∏:\n" + "\n".join(keys))

@router.message(Command("keys"))
async def keys_info(msg: types.Message):
    if not is_superadmin(msg.from_user.id):
        await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    await msg.answer(get_keys_info())

@router.message(Command("setrole"))
async def setrole(msg: types.Message):
    if not is_superadmin(msg.from_user.id):
        await msg.answer("‚ùå –¢–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω –º–æ–∂–µ—Ç –Ω–∞–∑–Ω–∞—á–∞—Ç—å —Ä–æ–ª–∏.")
        return

    parts = msg.text.split()
    if len(parts) != 3:
        await msg.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setrole <user_id> <—Ä–æ–ª—å>\n–ü—Ä–∏–º–µ—Ä: /setrole 123456789 moderator")
        return

    user_id, role = parts[1], parts[2]
    set_user_role(int(user_id), role)
    await msg.answer(f"‚úÖ –†–æ–ª—å '{role}' –Ω–∞–∑–Ω–∞—á–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
