from aiogram import Router, types, F
from aiogram.filters import Command
from config import ADMIN_PASSWORD
from utils.keygen import generate_keys, get_keys_info
from utils.auth import is_superadmin

router = Router()

@router.message(Command("panel"))
async def ask_password(msg: types.Message):
    await msg.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:")

@router.message(F.text == ADMIN_PASSWORD)
async def admin_panel(msg: types.Message):
    if not is_superadmin(msg.from_user.id):
        await msg.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return
    await msg.answer("üîê –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å. –í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n/generate ‚Äî —Å–æ–∑–¥–∞—Ç—å –∫–ª—é—á–∏\n/keys ‚Äî –ø—Ä–æ—Å–º–æ—Ç—Ä –∫–ª—é—á–µ–π")

@router.message(Command("generate"))
async def generate(msg: types.Message):
    if not is_superadmin(msg.from_user.id):
        await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    keys = generate_keys(10, created_by=msg.from_user.id)
    await msg.answer("üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã –∫–ª—é—á–∏:\n" + "\n".join(keys))

@router.message(Command("keys"))
async def keys_info(msg: types.Message):
    if not is_superadmin(msg.from_user.id):
        await msg.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
        return
    await msg.answer(get_keys_info())
