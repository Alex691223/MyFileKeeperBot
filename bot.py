import os
import sqlite3
from datetime import datetime

from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils import executor

from database import init_db

API_TOKEN = os.getenv("API_TOKEN")
if not API_TOKEN:
    raise ValueError("API_TOKEN is not set in environment variables")

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

init_db()

# --- –†–∞–±–æ—Ç–∞ —Å –ë–î ---
def save_file(user_id, file_id, file_type, caption, category):
    conn = sqlite3.connect("files.db")
    cur = conn.cursor()
    cur.execute('''
        INSERT INTO files (user_id, file_id, file_type, caption, category, created_at)
        VALUES (?, ?, ?, ?, ?, ?)
    ''', (user_id, file_id, file_type, caption, category, datetime.utcnow()))
    conn.commit()
    conn.close()

def detect_category(mime):
    if not mime:
        return "–î—Ä—É–≥–æ–µ"
    if "image" in mime:
        return "–§–æ—Ç–æ"
    if "video" in mime:
        return "–í–∏–¥–µ–æ"
    if "audio" in mime:
        return "–ê—É–¥–∏–æ"
    if "application" in mime:
        return "–î–æ–∫—É–º–µ–Ω—Ç—ã"
    return "–î—Ä—É–≥–æ–µ"

def add_category(user_id, name):
    conn = sqlite3.connect("files.db")
    cur = conn.cursor()
    cur.execute("SELECT id FROM categories WHERE user_id=? AND name=?", (user_id, name))
    if cur.fetchone():
        conn.close()
        return False
    cur.execute("INSERT INTO categories (user_id, name) VALUES (?, ?)", (user_id, name))
    conn.commit()
    conn.close()
    return True

def get_categories(user_id):
    conn = sqlite3.connect("files.db")
    cur = conn.cursor()
    cur.execute("SELECT name FROM categories WHERE user_id=?", (user_id,))
    categories = [row[0] for row in cur.fetchall()]
    conn.close()
    return categories

def get_files_by_category(user_id, category):
    conn = sqlite3.connect("files.db")
    cur = conn.cursor()
    cur.execute("SELECT file_id, caption FROM files WHERE user_id=? AND category=?", (user_id, category))
    files = cur.fetchall()
    conn.close()
    return files

# --- –î–ª—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ñ–∞–π–ª–∞—Ö, –∫–æ—Ç–æ—Ä—ã–º –Ω—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é ---
user_pending_files = {}  # {user_id: {'file_id': ..., 'file_type': ..., 'caption': ...}}

# --- –•—ç–Ω–¥–ª–µ—Ä—ã –±–æ—Ç–∞ ---

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª ‚Äî —è —Å–æ—Ö—Ä–∞–Ω—é –µ–≥–æ –¥–ª—è —Ç–µ–±—è.\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /addcategory <–Ω–∞–∑–≤–∞–Ω–∏–µ> —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π /categories —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–≤–æ–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏ –≤—ã–±—Ä–∞—Ç—å –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏."
    )

@dp.message_handler(commands=["addcategory"])
async def add_category_handler(message: types.Message):
    args = message.get_args()
    if not args:
        await message.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É —Ç–∞–∫: /addcategory <–Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏>")
        return
    success = add_category(message.from_user.id, args.strip())
    if success:
        await message.reply(f"‚úÖ –ö–∞—Ç–µ–≥–æ—Ä–∏—è '{args.strip()}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")
    else:
        await message.reply("‚ö†Ô∏è –¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")

@dp.message_handler(commands=["categories"])
async def categories_handler(message: types.Message):
    categories = get_categories(message.from_user.id)
    if not categories:
        await message.reply("–£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –î–æ–±–∞–≤—å –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π /addcategory.")
        return

    keyboard = InlineKeyboardMarkup(row_width=2)
    buttons = [InlineKeyboardButton(text=cat, callback_data=f"cat_{cat}") for cat in categories]
    keyboard.add(*buttons)
    await message.reply("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ñ–∞–π–ª–æ–≤:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("cat_"))
async def category_filter_handler(callback_query: types.CallbackQuery):
    category = callback_query.data[4:]
    user_id = callback_query.from_user.id
    files = get_files_by_category(user_id, category)

    if not files:
        await bot.answer_callback_query(callback_query.id, text="–§–∞–π–ª—ã –≤ —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", show_alert=True)
        return

    text_msgs = []
    for file_id, caption in files:
        text_msgs.append(f"üìé {caption} (file_id: {file_id})")

    await bot.send_message(user_id, f"–§–∞–π–ª—ã –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}':\n\n" + "\n".join(text_msgs))
    await bot.answer_callback_query(callback_query.id)

@dp.message_handler(content_types=types.ContentType.ANY)
async def handle_files(msg: types.Message):
    file = msg.document or (msg.photo[-1] if msg.photo else None) or msg.video or msg.audio
    if not file:
        await msg.reply("‚õîÔ∏è –§–∞–π–ª –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω.")
        return

    file_id = file.file_id
    file_type = getattr(file, 'mime_type', None) or 'unknown'
    caption = msg.caption or "–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å ‚Äî –∂–¥–µ–º –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    user_pending_files[msg.from_user.id] = {
        "file_id": file_id,
        "file_type": file_type,
        "caption": caption,
    }

    categories = get_categories(msg.from_user.id)
    keyboard = InlineKeyboardMarkup(row_width=2)

    buttons = [InlineKeyboardButton(text=cat, callback_data=f"choosecat_{cat}") for cat in categories]
    keyboard.add(*buttons)
    keyboard.add(InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é", callback_data="add_new_category"))

    await msg.reply("–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞ –∏–ª–∏ —Å–æ–∑–¥–∞–π –Ω–æ–≤—É—é:", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data and c.data.startswith("choosecat_"))
async def choose_category_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    category = callback_query.data[10:]

    pending = user_pending_files.get(user_id)
    if not pending:
        await bot.answer_callback_query(callback_query.id, text="–ù–µ—Ç —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è.", show_alert=True)
        return

    save_file(user_id, pending["file_id"], pending["file_type"], pending["caption"], category)
    del user_pending_files[user_id]

    await bot.answer_callback_query(callback_query.id, text=f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category}'.", show_alert=True)
    await bot.send_message(user_id, f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")

@dp.callback_query_handler(lambda c: c.data == "add_new_category")
async def add_new_category_callback(callback_query: types.CallbackQuery):
    user_id = callback_query.from_user.id
    await bot.answer_callback_query(callback_query.id)

    await bot.send_message(user_id, "–ù–∞–ø–∏—à–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ ‚Äî —Å–¥–µ–ª–∞–µ–º —á–µ—Ä–µ–∑ –ø—Ä–æ—Å—Ç—É—é –ª–æ–≥–∏–∫—É –≤ —Å–ª–æ–≤–∞—Ä–µ
    user_pending_files[user_id]["awaiting_category_name"] = True

@dp.message_handler()
async def new_category_name_handler(message: types.Message):
    user_id = message.from_user.id
    pending = user_pending_files.get(user_id)

    if not pending or not pending.get("awaiting_category_name"):
        # –≠—Ç–æ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ –æ—Å—Ç–∞–ª—å–Ω—ã–º —Ö—ç–Ω–¥–ª–µ—Ä–∞–º
        return

    category_name = message.text.strip()
    if not category_name:
        await message.reply("–ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
        return

    success = add_category(user_id, category_name)
    if not success:
        await message.reply("–¢–∞–∫–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª –≤ –Ω–æ–≤—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é
    save_file(user_id, pending["file_id"], pending["file_type"], pending["caption"], category_name)
    del user_pending_files[user_id]

    await message.reply(f"‚úÖ –ù–æ–≤–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è '{category_name}' —Å–æ–∑–¥–∞–Ω–∞ –∏ —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω –≤ –Ω–µ—ë.")

if __name__ == "__main__":
    executor.start_polling(dp)
