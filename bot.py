import os
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from aiogram.dispatcher.filters import Text
from database import init_db, add_user, set_avatar, get_avatar, set_chat, remove_chat, get_partner, get_all_users, get_all_chats
from config import API_TOKEN, ADMINS

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

init_db()

waiting_users = set()
avatar_waiting = set()  # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ /setavatar –∏ –∂–¥—É—Ç —Ñ–æ—Ç–æ

def add_to_waiting(user_id):
    waiting_users.add(user_id)

def remove_from_waiting(user_id):
    waiting_users.discard(user_id)

@dp.message_handler(commands=["start"])
async def start_handler(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username or ""
    add_user(user_id, username)
    await message.reply(
        "üëã –ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –∞–Ω–æ–Ω–∏–º–Ω—ã–π —á–∞—Ç-–±–æ—Ç.\n\n"
        "üí¨ –ò—Å–ø–æ–ª—å–∑—É–π /next –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.\n"
        "üõë /stop –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —á–∞—Ç–∞.\n"
        "üì∏ /setavatar —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä.\n"
        "‚ÑπÔ∏è /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
    )

@dp.message_handler(commands=["help"])
async def help_handler(message: types.Message):
    await message.reply(
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/next ‚Äî –Ω–∞–π—Ç–∏ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞\n"
        "/stop ‚Äî –∑–∞–≤–µ—Ä—à–∏—Ç—å —á–∞—Ç\n"
        "/setavatar ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∞–≤–∞—Ç–∞—Ä\n"
        "/help ‚Äî —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "–ê–¥–º–∏–Ω –∫–æ–º–∞–Ω–¥—ã:\n"
        "/stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        "/users ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    )

@dp.message_handler(commands=["setavatar"])
async def setavatar_cmd(message: types.Message):
    user_id = message.from_user.id
    avatar_waiting.add(user_id)
    await message.reply("üì∏ –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ –∫–∞–∫ –∞–≤–∞—Ç–∞—Ä.")

@dp.message_handler(content_types=types.ContentType.PHOTO)
async def photo_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id in avatar_waiting:
        photo = message.photo[-1]
        set_avatar(user_id, photo.file_id)
        avatar_waiting.discard(user_id)
        await message.reply("‚úÖ –ê–≤–∞—Ç–∞—Ä —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —á–∞—Ç–µ ‚Äî –ø–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ –ø–∞—Ä—Ç–Ω–µ—Ä—É
        partner_id = get_partner(user_id)
        if partner_id:
            await bot.send_photo(partner_id, message.photo[-1].file_id, caption=message.caption or "")
        else:
            await message.reply("‚ö†Ô∏è –¢—ã –Ω–µ –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π /next –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")

@dp.message_handler(commands=["next"])
async def next_handler(message: types.Message):
    user_id = message.from_user.id

    if get_partner(user_id):
        await message.reply("‚ùóÔ∏è –¢—ã —É–∂–µ –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π /stop, —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å –µ–≥–æ.")
        return

    if user_id in waiting_users:
        await message.reply("‚è≥ –¢—ã —É–∂–µ –∏—â–µ—à—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞. –ü–æ–¥–æ–∂–¥–∏.")
        return

    partner = None
    for candidate in waiting_users:
        if candidate != user_id:
            partner = candidate
            break

    if partner:
        set_chat(user_id, partner)
        set_chat(partner, user_id)
        remove_from_waiting(user_id)
        remove_from_waiting(partner)
        await bot.send_message(user_id, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ.\n–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —á–∞—Ç ‚Äî /stop.")
        await bot.send_message(partner, "‚úÖ –°–æ–±–µ—Å–µ–¥–Ω–∏–∫ –Ω–∞–π–¥–µ–Ω! –ù–∞—á–∏–Ω–∞–π—Ç–µ –æ–±—â–µ–Ω–∏–µ.\n–ß—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å —á–∞—Ç ‚Äî /stop.")
    else:
        add_to_waiting(user_id)
        await message.reply("üîé –ò—â—É –¥–ª—è —Ç–µ–±—è —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞...")

@dp.message_handler(commands=["stop"])
async def stop_handler(message: types.Message):
    user_id = message.from_user.id
    partner_id = get_partner(user_id)
    if partner_id:
        remove_chat(user_id)
        remove_chat(partner_id)
        await message.reply("üõë –ß–∞—Ç –∑–∞–≤–µ—Ä—à—ë–Ω.")
        await bot.send_message(partner_id, "üõë –¢–≤–æ–π —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫ –∑–∞–≤–µ—Ä—à–∏–ª —á–∞—Ç.")
    elif user_id in waiting_users:
        remove_from_waiting(user_id)
        await message.reply("‚ùå –¢—ã –≤—ã—à–µ–ª –∏–∑ –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
    else:
        await message.reply("‚ÑπÔ∏è –¢—ã –Ω–µ –≤ –∞–∫—Ç–∏–≤–Ω–æ–º —á–∞—Ç–µ –∏ –Ω–µ –∏—â–µ—à—å —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")

@dp.message_handler(commands=["stats"])
async def stats_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    users = get_all_users()
    chats = get_all_chats()
    text = f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n–ê–∫—Ç–∏–≤–Ω—ã—Ö —á–∞—Ç–æ–≤: {len(chats)//2}"
    await message.reply(text)

@dp.message_handler(commands=["users"])
async def users_handler(message: types.Message):
    user_id = message.from_user.id
    if user_id not in ADMINS:
        await message.reply("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return

    users = get_all_users()
    if not users:
        await message.reply("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—É—Å—Ç.")
        return

    text = "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –±–æ—Ç–∞:\n"
    for uid, uname in users:
        text += f"ID: {uid}, username: @{uname if uname else '-'}\n"
    await message.reply(text)

@dp.message_handler()
async def relay_message(message: types.Message):
    user_id = message.from_user.id
    partner_id = get_partner(user_id)

    if not partner_id:
        await message.reply("‚ö†Ô∏è –¢—ã –Ω–µ –≤ —á–∞—Ç–µ. –ò—Å–ø–æ–ª—å–∑—É–π /next –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞.")
        return

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–∞—Ä—Ç–Ω–µ—Ä—É (—Ç–µ–∫—Å—Ç, —Å—Ç–∏–∫–µ—Ä—ã, —Ñ–æ—Ç–æ –∏ –¥—Ä.)
    if message.text:
        await bot.send_message(partner_id, message.text)
    elif message.sticker:
        await bot.send_sticker(partner_id, message.sticker.file_id)
    elif message.photo:
        await bot.send_photo(partner_id, message.photo[-1].file_id, caption=message.caption or "")
    elif message.video:
        await bot.send_video(partner_id, message.video.file_id, caption=message.caption or "")
    elif message.voice:
        await bot.send_voice(partner_id, message.voice.file_id, caption=message.caption or "")
    else:
        await message.reply("‚ö†Ô∏è –≠—Ç–æ—Ç —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)

